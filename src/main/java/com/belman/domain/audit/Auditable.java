package com.belman.domain.audit;

/**
 * Interface for classes that can be audited.
 * <p>
 * Classes that implement this interface are indicating that they generate
 * audit events that should be tracked for accountability and traceability purposes.
 * <p>
 * The audit events generated by these classes will be stored in the audit log
 * and can be used for reporting, compliance, and troubleshooting.
 */
public interface Auditable {

    /**
     * Gets the type of entity being audited.
     * <p>
     * This is typically the simple name of the entity class, but it can be
     * any string that uniquely identifies the type of entity.
     *
     * @return the entity type
     */
    String getAuditEntityType();

    /**
     * Gets the ID of the entity being audited.
     * <p>
     * This is typically the unique identifier of the entity, but it can be
     * any string that uniquely identifies the entity instance.
     *
     * @return the entity ID
     */
    String getAuditEntityId();

    /**
     * Gets the user ID of the user who performed the action being audited.
     * <p>
     * This is typically the ID of the user who is currently logged in, but
     * it can be any string that uniquely identifies the user.
     *
     * @return the user ID
     */
    String getAuditUserId();

    /**
     * Gets the action being performed.
     * <p>
     * This is typically a verb that describes the action, such as "create",
     * "update", "delete", "approve", "reject", etc.
     *
     * @return the action
     */
    String getAuditAction();

    /**
     * Gets additional details about the action being performed.
     * <p>
     * This can be any string that provides additional context about the action,
     * such as the fields that were changed, the reason for rejection, etc.
     *
     * @return the details
     */
    String getAuditDetails();
}
