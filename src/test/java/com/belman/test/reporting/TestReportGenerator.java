package com.belman.test.reporting;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;

/**
 * A utility class for generating HTML test reports from JUnit XML reports.
 * This class processes the XML reports generated by the Maven Surefire plugin
 * and converts them to more readable HTML reports.
 */
public class TestReportGenerator {

    private static final String XML_REPORTS_DIR = "target/surefire-reports";
    private static final String HTML_REPORTS_DIR = "test-reports";

    /**
     * Main method to generate HTML reports from JUnit XML reports.
     * 
     * @param args command line arguments (not used)
     */
    public static void main(String[] args) {
        System.out.println("[DEBUG_LOG] Starting test report generation");
        
        try {
            // Create the output directory if it doesn't exist
            createReportDirectory();
            
            // Process all XML reports in the Surefire reports directory
            File[] xmlReports = findXmlReports();
            if (xmlReports != null && xmlReports.length > 0) {
                List<TestSuite> testSuites = parseXmlReports(xmlReports);
                generateHtmlReport(testSuites);
                System.out.println("[DEBUG_LOG] Test report generation completed successfully");
            } else {
                System.out.println("[DEBUG_LOG] No XML test reports found in " + XML_REPORTS_DIR);
            }
        } catch (Exception e) {
            System.err.println("Error generating test reports: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * Creates the report directory if it doesn't exist.
     */
    private static void createReportDirectory() throws IOException {
        Path reportDir = Paths.get(HTML_REPORTS_DIR);
        if (!Files.exists(reportDir)) {
            Files.createDirectories(reportDir);
            System.out.println("[DEBUG_LOG] Created report directory: " + reportDir.toAbsolutePath());
        }
    }

    /**
     * Finds all XML test reports in the Surefire reports directory.
     * 
     * @return an array of XML report files
     */
    private static File[] findXmlReports() {
        File reportsDir = new File(XML_REPORTS_DIR);
        if (!reportsDir.exists() || !reportsDir.isDirectory()) {
            System.out.println("[DEBUG_LOG] Surefire reports directory not found: " + reportsDir.getAbsolutePath());
            return new File[0];
        }
        
        return reportsDir.listFiles((dir, name) -> name.endsWith(".xml") && !name.startsWith("TEST-"));
    }

    /**
     * Parses XML test reports into TestSuite objects.
     * 
     * @param xmlReports the XML report files to parse
     * @return a list of TestSuite objects
     */
    private static List<TestSuite> parseXmlReports(File[] xmlReports) throws Exception {
        List<TestSuite> testSuites = new ArrayList<>();
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        DocumentBuilder builder = factory.newDocumentBuilder();
        
        for (File xmlReport : xmlReports) {
            System.out.println("[DEBUG_LOG] Parsing XML report: " + xmlReport.getName());
            
            Document document = builder.parse(xmlReport);
            Element rootElement = document.getDocumentElement();
            
            TestSuite testSuite = new TestSuite();
            testSuite.name = rootElement.getAttribute("name");
            testSuite.tests = Integer.parseInt(rootElement.getAttribute("tests"));
            testSuite.failures = Integer.parseInt(rootElement.getAttribute("failures"));
            testSuite.errors = Integer.parseInt(rootElement.getAttribute("errors"));
            testSuite.skipped = Integer.parseInt(rootElement.getAttribute("skipped"));
            testSuite.time = Double.parseDouble(rootElement.getAttribute("time"));
            
            NodeList testCaseNodes = rootElement.getElementsByTagName("testcase");
            for (int i = 0; i < testCaseNodes.getLength(); i++) {
                Element testCaseElement = (Element) testCaseNodes.item(i);
                
                TestCase testCase = new TestCase();
                testCase.name = testCaseElement.getAttribute("name");
                testCase.className = testCaseElement.getAttribute("classname");
                testCase.time = Double.parseDouble(testCaseElement.getAttribute("time"));
                
                // Check for failure
                NodeList failureNodes = testCaseElement.getElementsByTagName("failure");
                if (failureNodes.getLength() > 0) {
                    Element failureElement = (Element) failureNodes.item(0);
                    testCase.status = "FAILED";
                    testCase.message = failureElement.getAttribute("message");
                    testCase.type = failureElement.getAttribute("type");
                    testCase.stackTrace = failureElement.getTextContent();
                } 
                // Check for error
                else {
                    NodeList errorNodes = testCaseElement.getElementsByTagName("error");
                    if (errorNodes.getLength() > 0) {
                        Element errorElement = (Element) errorNodes.item(0);
                        testCase.status = "ERROR";
                        testCase.message = errorElement.getAttribute("message");
                        testCase.type = errorElement.getAttribute("type");
                        testCase.stackTrace = errorElement.getTextContent();
                    } 
                    // Check for skipped
                    else {
                        NodeList skippedNodes = testCaseElement.getElementsByTagName("skipped");
                        if (skippedNodes.getLength() > 0) {
                            Element skippedElement = (Element) skippedNodes.item(0);
                            testCase.status = "SKIPPED";
                            testCase.message = skippedElement.getAttribute("message");
                        } 
                        // Otherwise, it passed
                        else {
                            testCase.status = "PASSED";
                        }
                    }
                }
                
                testSuite.testCases.add(testCase);
            }
            
            testSuites.add(testSuite);
        }
        
        return testSuites;
    }

    /**
     * Generates an HTML report from the parsed test suites.
     * 
     * @param testSuites the test suites to include in the report
     */
    private static void generateHtmlReport(List<TestSuite> testSuites) throws IOException {
        String timestamp = DateTimeFormatter.ofPattern("yyyyMMdd_HHmmss").format(LocalDateTime.now());
        String reportFileName = HTML_REPORTS_DIR + File.separator + "test_report_" + timestamp + ".html";
        
        // Calculate summary statistics
        int totalTests = 0;
        int totalPassed = 0;
        int totalFailed = 0;
        int totalErrors = 0;
        int totalSkipped = 0;
        double totalTime = 0.0;
        
        for (TestSuite suite : testSuites) {
            totalTests += suite.tests;
            totalFailed += suite.failures;
            totalErrors += suite.errors;
            totalSkipped += suite.skipped;
            totalTime += suite.time;
            totalPassed += (suite.tests - suite.failures - suite.errors - suite.skipped);
        }
        
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(reportFileName))) {
            writer.write("<!DOCTYPE html>\n");
            writer.write("<html lang=\"en\">\n");
            writer.write("<head>\n");
            writer.write("    <meta charset=\"UTF-8\">\n");
            writer.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n");
            writer.write("    <title>Belsign Photo Documentation Test Report</title>\n");
            writer.write("    <style>\n");
            writer.write("        body { font-family: Arial, sans-serif; margin: 20px; }\n");
            writer.write("        h1 { color: #333; }\n");
            writer.write("        .summary { background-color: #f5f5f5; padding: 15px; border-radius: 5px; margin-bottom: 20px; }\n");
            writer.write("        .suite { background-color: #e9ecef; padding: 10px; border-radius: 5px; margin-bottom: 15px; }\n");
            writer.write("        .passed { color: green; }\n");
            writer.write("        .failed { color: red; }\n");
            writer.write("        .error { color: darkred; }\n");
            writer.write("        .skipped { color: orange; }\n");
            writer.write("        table { border-collapse: collapse; width: 100%; margin-top: 10px; }\n");
            writer.write("        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n");
            writer.write("        th { background-color: #f2f2f2; }\n");
            writer.write("        tr:nth-child(even) { background-color: #f9f9f9; }\n");
            writer.write("        .details { margin-top: 5px; padding: 10px; background-color: #f8f9fa; border-left: 3px solid #dee2e6; }\n");
            writer.write("        .stack-trace { font-family: monospace; white-space: pre-wrap; margin-top: 10px; padding: 10px; background-color: #f8f9fa; border-left: 3px solid #dee2e6; }\n");
            writer.write("    </style>\n");
            writer.write("</head>\n");
            writer.write("<body>\n");
            
            writer.write("    <h1>Belsign Photo Documentation Test Report</h1>\n");
            writer.write("    <p>Generated: " + LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")) + "</p>\n");
            
            // Summary section
            writer.write("    <div class=\"summary\">\n");
            writer.write("        <h2>Test Execution Summary</h2>\n");
            writer.write("        <p>Total Test Suites: " + testSuites.size() + "</p>\n");
            writer.write("        <p>Total Tests: " + totalTests + "</p>\n");
            writer.write("        <p class=\"passed\">Passed: " + totalPassed + "</p>\n");
            writer.write("        <p class=\"failed\">Failed: " + totalFailed + "</p>\n");
            writer.write("        <p class=\"error\">Errors: " + totalErrors + "</p>\n");
            writer.write("        <p class=\"skipped\">Skipped: " + totalSkipped + "</p>\n");
            writer.write("        <p>Total Time: " + String.format("%.2f", totalTime) + " seconds</p>\n");
            writer.write("    </div>\n");
            
            // Test suites section
            writer.write("    <h2>Test Suites</h2>\n");
            
            for (TestSuite suite : testSuites) {
                writer.write("    <div class=\"suite\">\n");
                writer.write("        <h3>" + suite.name + "</h3>\n");
                writer.write("        <p>Tests: " + suite.tests + ", ");
                writer.write("Failures: " + suite.failures + ", ");
                writer.write("Errors: " + suite.errors + ", ");
                writer.write("Skipped: " + suite.skipped + ", ");
                writer.write("Time: " + String.format("%.2f", suite.time) + " seconds</p>\n");
                
                // Test cases table
                writer.write("        <table>\n");
                writer.write("            <tr>\n");
                writer.write("                <th>Test Case</th>\n");
                writer.write("                <th>Status</th>\n");
                writer.write("                <th>Time (s)</th>\n");
                writer.write("            </tr>\n");
                
                for (TestCase testCase : suite.testCases) {
                    String statusClass = "";
                    switch (testCase.status) {
                        case "PASSED":
                            statusClass = "passed";
                            break;
                        case "FAILED":
                            statusClass = "failed";
                            break;
                        case "ERROR":
                            statusClass = "error";
                            break;
                        case "SKIPPED":
                            statusClass = "skipped";
                            break;
                    }
                    
                    writer.write("            <tr>\n");
                    writer.write("                <td>" + testCase.name + "</td>\n");
                    writer.write("                <td class=\"" + statusClass + "\">" + testCase.status + "</td>\n");
                    writer.write("                <td>" + String.format("%.3f", testCase.time) + "</td>\n");
                    writer.write("            </tr>\n");
                    
                    // If there's a failure or error, show the details
                    if ("FAILED".equals(testCase.status) || "ERROR".equals(testCase.status)) {
                        writer.write("            <tr>\n");
                        writer.write("                <td colspan=\"3\">\n");
                        writer.write("                    <div class=\"details\">\n");
                        writer.write("                        <strong>Type:</strong> " + testCase.type + "<br>\n");
                        writer.write("                        <strong>Message:</strong> " + testCase.message + "\n");
                        
                        if (testCase.stackTrace != null && !testCase.stackTrace.isEmpty()) {
                            writer.write("                        <div class=\"stack-trace\">" + testCase.stackTrace + "</div>\n");
                        }
                        
                        writer.write("                    </div>\n");
                        writer.write("                </td>\n");
                        writer.write("            </tr>\n");
                    }
                }
                
                writer.write("        </table>\n");
                writer.write("    </div>\n");
            }
            
            writer.write("</body>\n");
            writer.write("</html>");
            
            System.out.println("[DEBUG_LOG] HTML report generated: " + reportFileName);
        }
    }

    /**
     * Class representing a test suite.
     */
    private static class TestSuite {
        String name;
        int tests;
        int failures;
        int errors;
        int skipped;
        double time;
        List<TestCase> testCases = new ArrayList<>();
    }

    /**
     * Class representing a test case.
     */
    private static class TestCase {
        String name;
        String className;
        double time;
        String status;
        String message;
        String type;
        String stackTrace;
    }
}