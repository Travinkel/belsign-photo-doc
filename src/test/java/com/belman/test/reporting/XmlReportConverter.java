package com.belman.test.reporting;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;

/**
 * A script to convert XML test reports to HTML or PDF format.
 * This script can be run as a standalone utility to process XML reports
 * generated by the Maven Surefire plugin.
 * 
 * Usage:
 * java XmlReportConverter [options]
 * 
 * Options:
 * --input-dir=<directory>   : Directory containing XML reports (default: target/surefire-reports)
 * --output-dir=<directory>  : Directory for output reports (default: test-reports)
 * --format=<format>         : Output format, either 'html' or 'pdf' (default: html)
 * --help                    : Display this help message
 */
public class XmlReportConverter {

    private static final String DEFAULT_XML_REPORTS_DIR = "target/surefire-reports";
    private static final String DEFAULT_OUTPUT_DIR = "test-reports";
    private static final String DEFAULT_FORMAT = "html";

    private String inputDir;
    private String outputDir;
    private String format;

    /**
     * Constructor with default values.
     */
    public XmlReportConverter() {
        this.inputDir = DEFAULT_XML_REPORTS_DIR;
        this.outputDir = DEFAULT_OUTPUT_DIR;
        this.format = DEFAULT_FORMAT;
    }

    /**
     * Main method to run the converter.
     * 
     * @param args command line arguments
     */
    public static void main(String[] args) {
        XmlReportConverter converter = new XmlReportConverter();
        
        // Parse command line arguments
        if (args.length > 0) {
            for (String arg : args) {
                if (arg.equals("--help")) {
                    printHelp();
                    return;
                } else if (arg.startsWith("--input-dir=")) {
                    converter.inputDir = arg.substring("--input-dir=".length());
                } else if (arg.startsWith("--output-dir=")) {
                    converter.outputDir = arg.substring("--output-dir=".length());
                } else if (arg.startsWith("--format=")) {
                    converter.format = arg.substring("--format=".length()).toLowerCase();
                    if (!converter.format.equals("html") && !converter.format.equals("pdf")) {
                        System.err.println("Error: Format must be either 'html' or 'pdf'");
                        printHelp();
                        return;
                    }
                } else {
                    System.err.println("Unknown argument: " + arg);
                    printHelp();
                    return;
                }
            }
        }
        
        System.out.println("[DEBUG_LOG] Starting XML report conversion");
        System.out.println("[DEBUG_LOG] Input directory: " + converter.inputDir);
        System.out.println("[DEBUG_LOG] Output directory: " + converter.outputDir);
        System.out.println("[DEBUG_LOG] Output format: " + converter.format);
        
        try {
            converter.run();
        } catch (Exception e) {
            System.err.println("Error converting reports: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * Prints help information.
     */
    private static void printHelp() {
        System.out.println("XML Report Converter");
        System.out.println("Usage: java XmlReportConverter [options]");
        System.out.println();
        System.out.println("Options:");
        System.out.println("  --input-dir=<directory>   : Directory containing XML reports (default: target/surefire-reports)");
        System.out.println("  --output-dir=<directory>  : Directory for output reports (default: test-reports)");
        System.out.println("  --format=<format>         : Output format, either 'html' or 'pdf' (default: html)");
        System.out.println("  --help                    : Display this help message");
    }

    /**
     * Runs the conversion process.
     */
    public void run() throws Exception {
        // Create the output directory if it doesn't exist
        createOutputDirectory();
        
        // Find and process XML reports
        File[] xmlReports = findXmlReports();
        if (xmlReports != null && xmlReports.length > 0) {
            List<TestSuite> testSuites = parseXmlReports(xmlReports);
            
            if (format.equals("html")) {
                generateHtmlReport(testSuites);
            } else if (format.equals("pdf")) {
                generatePdfReport(testSuites);
            }
            
            System.out.println("[DEBUG_LOG] Report generation completed successfully");
        } else {
            System.out.println("[DEBUG_LOG] No XML test reports found in " + inputDir);
        }
    }

    /**
     * Creates the output directory if it doesn't exist.
     */
    private void createOutputDirectory() throws IOException {
        Path reportDir = Paths.get(outputDir);
        if (!Files.exists(reportDir)) {
            Files.createDirectories(reportDir);
            System.out.println("[DEBUG_LOG] Created output directory: " + reportDir.toAbsolutePath());
        }
    }

    /**
     * Finds all XML test reports in the input directory.
     * 
     * @return an array of XML report files
     */
    private File[] findXmlReports() {
        File reportsDir = new File(inputDir);
        if (!reportsDir.exists() || !reportsDir.isDirectory()) {
            System.out.println("[DEBUG_LOG] Input directory not found: " + reportsDir.getAbsolutePath());
            return new File[0];
        }
        
        return reportsDir.listFiles((dir, name) -> name.endsWith(".xml") && !name.startsWith("TEST-"));
    }

    /**
     * Parses XML test reports into TestSuite objects.
     * 
     * @param xmlReports the XML report files to parse
     * @return a list of TestSuite objects
     */
    private List<TestSuite> parseXmlReports(File[] xmlReports) throws Exception {
        List<TestSuite> testSuites = new ArrayList<>();
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        DocumentBuilder builder = factory.newDocumentBuilder();
        
        for (File xmlReport : xmlReports) {
            System.out.println("[DEBUG_LOG] Parsing XML report: " + xmlReport.getName());
            
            Document document = builder.parse(xmlReport);
            Element rootElement = document.getDocumentElement();
            
            TestSuite testSuite = new TestSuite();
            testSuite.name = rootElement.getAttribute("name");
            testSuite.tests = Integer.parseInt(rootElement.getAttribute("tests"));
            testSuite.failures = Integer.parseInt(rootElement.getAttribute("failures"));
            testSuite.errors = Integer.parseInt(rootElement.getAttribute("errors"));
            testSuite.skipped = Integer.parseInt(rootElement.getAttribute("skipped"));
            testSuite.time = Double.parseDouble(rootElement.getAttribute("time"));
            
            NodeList testCaseNodes = rootElement.getElementsByTagName("testcase");
            for (int i = 0; i < testCaseNodes.getLength(); i++) {
                Element testCaseElement = (Element) testCaseNodes.item(i);
                
                TestCase testCase = new TestCase();
                testCase.name = testCaseElement.getAttribute("name");
                testCase.className = testCaseElement.getAttribute("classname");
                testCase.time = Double.parseDouble(testCaseElement.getAttribute("time"));
                
                // Check for failure
                NodeList failureNodes = testCaseElement.getElementsByTagName("failure");
                if (failureNodes.getLength() > 0) {
                    Element failureElement = (Element) failureNodes.item(0);
                    testCase.status = "FAILED";
                    testCase.message = failureElement.getAttribute("message");
                    testCase.type = failureElement.getAttribute("type");
                    testCase.stackTrace = failureElement.getTextContent();
                } 
                // Check for error
                else {
                    NodeList errorNodes = testCaseElement.getElementsByTagName("error");
                    if (errorNodes.getLength() > 0) {
                        Element errorElement = (Element) errorNodes.item(0);
                        testCase.status = "ERROR";
                        testCase.message = errorElement.getAttribute("message");
                        testCase.type = errorElement.getAttribute("type");
                        testCase.stackTrace = errorElement.getTextContent();
                    } 
                    // Check for skipped
                    else {
                        NodeList skippedNodes = testCaseElement.getElementsByTagName("skipped");
                        if (skippedNodes.getLength() > 0) {
                            Element skippedElement = (Element) skippedNodes.item(0);
                            testCase.status = "SKIPPED";
                            testCase.message = skippedElement.getAttribute("message");
                        } 
                        // Otherwise, it passed
                        else {
                            testCase.status = "PASSED";
                        }
                    }
                }
                
                testSuite.testCases.add(testCase);
            }
            
            testSuites.add(testSuite);
        }
        
        return testSuites;
    }

    /**
     * Generates an HTML report from the parsed test suites.
     * 
     * @param testSuites the test suites to include in the report
     */
    private void generateHtmlReport(List<TestSuite> testSuites) throws IOException {
        String timestamp = DateTimeFormatter.ofPattern("yyyyMMdd_HHmmss").format(LocalDateTime.now());
        String reportFileName = outputDir + File.separator + "test_report_" + timestamp + ".html";
        
        // Calculate summary statistics
        int totalTests = 0;
        int totalPassed = 0;
        int totalFailed = 0;
        int totalErrors = 0;
        int totalSkipped = 0;
        double totalTime = 0.0;
        
        for (TestSuite suite : testSuites) {
            totalTests += suite.tests;
            totalFailed += suite.failures;
            totalErrors += suite.errors;
            totalSkipped += suite.skipped;
            totalTime += suite.time;
            totalPassed += (suite.tests - suite.failures - suite.errors - suite.skipped);
        }
        
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(reportFileName))) {
            writer.write("<!DOCTYPE html>\n");
            writer.write("<html lang=\"en\">\n");
            writer.write("<head>\n");
            writer.write("    <meta charset=\"UTF-8\">\n");
            writer.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n");
            writer.write("    <title>Belsign Photo Documentation Test Report</title>\n");
            writer.write("    <style>\n");
            writer.write("        body { font-family: Arial, sans-serif; margin: 20px; }\n");
            writer.write("        h1 { color: #333; }\n");
            writer.write("        .summary { background-color: #f5f5f5; padding: 15px; border-radius: 5px; margin-bottom: 20px; }\n");
            writer.write("        .suite { background-color: #e9ecef; padding: 10px; border-radius: 5px; margin-bottom: 15px; }\n");
            writer.write("        .passed { color: green; }\n");
            writer.write("        .failed { color: red; }\n");
            writer.write("        .error { color: darkred; }\n");
            writer.write("        .skipped { color: orange; }\n");
            writer.write("        table { border-collapse: collapse; width: 100%; margin-top: 10px; }\n");
            writer.write("        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n");
            writer.write("        th { background-color: #f2f2f2; }\n");
            writer.write("        tr:nth-child(even) { background-color: #f9f9f9; }\n");
            writer.write("        .details { margin-top: 5px; padding: 10px; background-color: #f8f9fa; border-left: 3px solid #dee2e6; }\n");
            writer.write("        .stack-trace { font-family: monospace; white-space: pre-wrap; margin-top: 10px; padding: 10px; background-color: #f8f9fa; border-left: 3px solid #dee2e6; }\n");
            writer.write("    </style>\n");
            writer.write("</head>\n");
            writer.write("<body>\n");
            
            writer.write("    <h1>Belsign Photo Documentation Test Report</h1>\n");
            writer.write("    <p>Generated: " + LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")) + "</p>\n");
            
            // Summary section
            writer.write("    <div class=\"summary\">\n");
            writer.write("        <h2>Test Execution Summary</h2>\n");
            writer.write("        <p>Total Test Suites: " + testSuites.size() + "</p>\n");
            writer.write("        <p>Total Tests: " + totalTests + "</p>\n");
            writer.write("        <p class=\"passed\">Passed: " + totalPassed + "</p>\n");
            writer.write("        <p class=\"failed\">Failed: " + totalFailed + "</p>\n");
            writer.write("        <p class=\"error\">Errors: " + totalErrors + "</p>\n");
            writer.write("        <p class=\"skipped\">Skipped: " + totalSkipped + "</p>\n");
            writer.write("        <p>Total Time: " + String.format("%.2f", totalTime) + " seconds</p>\n");
            writer.write("    </div>\n");
            
            // Test suites section
            writer.write("    <h2>Test Suites</h2>\n");
            
            for (TestSuite suite : testSuites) {
                writer.write("    <div class=\"suite\">\n");
                writer.write("        <h3>" + suite.name + "</h3>\n");
                writer.write("        <p>Tests: " + suite.tests + ", ");
                writer.write("Failures: " + suite.failures + ", ");
                writer.write("Errors: " + suite.errors + ", ");
                writer.write("Skipped: " + suite.skipped + ", ");
                writer.write("Time: " + String.format("%.2f", suite.time) + " seconds</p>\n");
                
                // Test cases table
                writer.write("        <table>\n");
                writer.write("            <tr>\n");
                writer.write("                <th>Test Case</th>\n");
                writer.write("                <th>Status</th>\n");
                writer.write("                <th>Time (s)</th>\n");
                writer.write("            </tr>\n");
                
                for (TestCase testCase : suite.testCases) {
                    String statusClass = "";
                    switch (testCase.status) {
                        case "PASSED":
                            statusClass = "passed";
                            break;
                        case "FAILED":
                            statusClass = "failed";
                            break;
                        case "ERROR":
                            statusClass = "error";
                            break;
                        case "SKIPPED":
                            statusClass = "skipped";
                            break;
                    }
                    
                    writer.write("            <tr>\n");
                    writer.write("                <td>" + testCase.name + "</td>\n");
                    writer.write("                <td class=\"" + statusClass + "\">" + testCase.status + "</td>\n");
                    writer.write("                <td>" + String.format("%.3f", testCase.time) + "</td>\n");
                    writer.write("            </tr>\n");
                    
                    // If there's a failure or error, show the details
                    if ("FAILED".equals(testCase.status) || "ERROR".equals(testCase.status)) {
                        writer.write("            <tr>\n");
                        writer.write("                <td colspan=\"3\">\n");
                        writer.write("                    <div class=\"details\">\n");
                        writer.write("                        <strong>Type:</strong> " + testCase.type + "<br>\n");
                        writer.write("                        <strong>Message:</strong> " + testCase.message + "\n");
                        
                        if (testCase.stackTrace != null && !testCase.stackTrace.isEmpty()) {
                            writer.write("                        <div class=\"stack-trace\">" + testCase.stackTrace + "</div>\n");
                        }
                        
                        writer.write("                    </div>\n");
                        writer.write("                </td>\n");
                        writer.write("            </tr>\n");
                    }
                }
                
                writer.write("        </table>\n");
                writer.write("    </div>\n");
            }
            
            writer.write("</body>\n");
            writer.write("</html>");
            
            System.out.println("[DEBUG_LOG] HTML report generated: " + reportFileName);
        }
    }

    /**
     * Generates a PDF report from the parsed test suites.
     * 
     * @param testSuites the test suites to include in the report
     */
    private void generatePdfReport(List<TestSuite> testSuites) throws IOException {
        String timestamp = DateTimeFormatter.ofPattern("yyyyMMdd_HHmmss").format(LocalDateTime.now());
        String reportFileName = outputDir + File.separator + "test_report_" + timestamp + ".pdf";
        
        // Calculate summary statistics
        int totalTests = 0;
        int totalPassed = 0;
        int totalFailed = 0;
        int totalErrors = 0;
        int totalSkipped = 0;
        double totalTime = 0.0;
        
        for (TestSuite suite : testSuites) {
            totalTests += suite.tests;
            totalFailed += suite.failures;
            totalErrors += suite.errors;
            totalSkipped += suite.skipped;
            totalTime += suite.time;
            totalPassed += (suite.tests - suite.failures - suite.errors - suite.skipped);
        }
        
        // Note: For a real implementation, you would use a PDF library like iText or Apache PDFBox
        // Since we can't add dependencies in this environment, we'll create a simple text-based PDF
        // representation as a placeholder
        
        try (FileOutputStream fos = new FileOutputStream(reportFileName)) {
            String pdfContent = "Belsign Photo Documentation Test Report\n" +
                    "Generated: " + LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")) + "\n\n" +
                    "Test Execution Summary\n" +
                    "---------------------\n" +
                    "Total Test Suites: " + testSuites.size() + "\n" +
                    "Total Tests: " + totalTests + "\n" +
                    "Passed: " + totalPassed + "\n" +
                    "Failed: " + totalFailed + "\n" +
                    "Errors: " + totalErrors + "\n" +
                    "Skipped: " + totalSkipped + "\n" +
                    "Total Time: " + String.format("%.2f", totalTime) + " seconds\n\n";
            
            // Add test suite details
            for (TestSuite suite : testSuites) {
                pdfContent += "Test Suite: " + suite.name + "\n" +
                        "Tests: " + suite.tests + ", " +
                        "Failures: " + suite.failures + ", " +
                        "Errors: " + suite.errors + ", " +
                        "Skipped: " + suite.skipped + ", " +
                        "Time: " + String.format("%.2f", suite.time) + " seconds\n\n";
                
                // Add test case details
                for (TestCase testCase : suite.testCases) {
                    pdfContent += "  - " + testCase.name + ": " + testCase.status + 
                            " (" + String.format("%.3f", testCase.time) + "s)\n";
                    
                    if ("FAILED".equals(testCase.status) || "ERROR".equals(testCase.status)) {
                        pdfContent += "    Type: " + testCase.type + "\n" +
                                "    Message: " + testCase.message + "\n";
                        
                        if (testCase.stackTrace != null && !testCase.stackTrace.isEmpty()) {
                            pdfContent += "    Stack Trace: " + testCase.stackTrace.replace("\n", "\n    ") + "\n";
                        }
                    }
                }
                
                pdfContent += "\n";
            }
            
            // Write the content to the file
            fos.write(pdfContent.getBytes());
            
            System.out.println("[DEBUG_LOG] PDF report generated: " + reportFileName);
            System.out.println("[DEBUG_LOG] Note: This is a placeholder PDF. In a real implementation, use a PDF library.");
        }
    }

    /**
     * Class representing a test suite.
     */
    private static class TestSuite {
        String name;
        int tests;
        int failures;
        int errors;
        int skipped;
        double time;
        List<TestCase> testCases = new ArrayList<>();
    }

    /**
     * Class representing a test case.
     */
    private static class TestCase {
        String name;
        String className;
        double time;
        String status;
        String message;
        String type;
        String stackTrace;
    }
}