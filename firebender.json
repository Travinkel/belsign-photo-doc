{
  "rules": [
    "Project is a mobile-friendly JavaFX photo documentation system for Belman A/S",
    "Use Gluon Mobile with GraalVM CE for building native Android apps",
    "Use GraalVM resource configuration and reflection metadata for native image builds",
    "Follow Clean Architecture and Domain-Driven Design strictly across all layers",
    "Use the Serviceâ€“Repository pattern in the application and domain layers",
    "Use MVVM+C (Model-View-ViewModel + Controller) adapted for JavaFX + FXML",
    "Use PlantUML for class/component diagrams and Structurizr for C4 modeling (Context, Container, Component)",
    "Use SQLite as the in-memory database for development and unit testing",
    "Use MSSQL as the production database per curriculum requirements",
    "Structure code using Package-by-Feature (vertical slices, not horizontal layers)",
    "Ensure strict boundary rules: domain layer depends on nothing, application layer only depends on domain",
    "All dependencies must point inward (Clean Architecture dependency rule)",
    "Never access infrastructure or JavaFX-specific code from the domain or application layers",
    "Avoid static singletons except for constants or platform utilities",
    "Use constructor injection and avoid service locators or manual dependency wiring",
    "Replace removed Backbone framework components with pure FXML + ViewModel bindings",
    "Expose UI changes through observable JavaFX properties from the ViewModel",
    "Ensure full mobile compatibility: responsive layout, touch targets, font scaling, platform detection",
    "Never block the JavaFX Application Thread (UI thread)",
    "Use asynchronous background tasks for I/O operations",
    "Use `java.util.Optional` instead of returning null in all public APIs",
    "Use `javafx.beans.property.*` types in ViewModels for UI binding",
    "Controllers only call ViewModels; never hold business logic directly",
    "Avoid `Platform.runLater` unless absolutely necessary (prefer state binding via ViewModel)",
    "Use abstract interfaces for external concerns (PDF, email, camera, database)",
    "Ensure UI and infrastructure adapters are testable via mocking or stubbing",
    "Mock Gluon Attach services for unit and integration tests on non-mobile environments",
    "Write and maintain JUnit 5 tests for all domain services and use cases",
    "Use ArchUnit to enforce architectural boundaries and detect violations",
    "Track code quality and maintainability with SonarQube or static analysis tools",
    "GraalVM native image config must be explicitly declared and tested with each Android build",
    "All source code must be readable and layered: show full vertical slice (UI, app, domain, infra)",
    "Use GitHub Issues and GitHub Projects for backlog tracking and burndown visibility",
    "Sprint documentation (planning, review, retro) must be part of the final report",
    "Use Scrum methodology and ScrumWise for backlog and sprint tracking",
    "Document design patterns used with concrete class references in the report",
    "Include relevant UML diagrams and explain architectural tradeoffs in the report",
    "Use meaningful logging, not `System.out`, and support log-level filtering",
  ]
}
